#include<bits/stdc++.h>
typedef long long ll;
using namespace std;

void update(ll *tree,ll *lazy,ll start,ll end,ll l,ll r,ll curr,ll val){
    
    if(lazy[curr]!=0){
        tree[curr]+= (lazy[curr]*(end-start+1));
        if(start!=end){
            lazy[2*curr] += lazy[curr];
            lazy[2*curr+1] += lazy[curr];
        }
        lazy[curr] = 0;
        
    }
    //No overlap
    if(l>end||start>r){
        return;
    }
    //Complete Overlap
    if(start>=l&&end<=r){
        tree[curr]+= (val*(end-start+1));
        if(start!=end){
           lazy[2*curr] += val;
           lazy[2*curr+1] += val; 
        }
       // lazy[curr] = 0;
        return;
    }
    ll mid = (start+end)/2;
    update(tree,lazy,start,mid,l,r,2*curr,val);
   
    update(tree,lazy,mid+1,end,l,r,2*curr+1,val);
    tree[curr] = tree[2*curr] + tree[2*curr+1];
}
ll query(ll *tree,ll *lazy,ll start,ll end,ll curr,ll l,ll r){
    
     if(lazy[curr]!=0){
        tree[curr]+= (lazy[curr]*(end-start+1));
        if(start!=end){
            lazy[2*curr] += lazy[curr];
            lazy[2*curr+1] += lazy[curr];
        }
        lazy[curr] = 0;
        
    }
    //No overlap
    if(start>r||end<l){
        return 0;
    }
    //Complete Overlap
    if(start>=l&&end<=r){
        /*if(lazy[curr]!=0){
            tree[curr]+=lazy[curr]*(end-start+1);
            lazy[curr] = 0;
        }*/
        return tree[curr];
    }
    ll mid = (start+end)/2;
    ll sub1 = query(tree,lazy,start,mid,2*curr,l,r);
    ll sub2 = query(tree,lazy,mid+1,end,2*curr+1,l,r);
    return sub1 + sub2;
 }
int main() {

	// Write your code here
    int t;
    cin>>t;
    while(t--){
        ll n,c;
        cin>>n>>c;
       // ll *array = new ll[n]();
        ll *tree = new ll[4*n]();
        ll *lazy = new ll[4*n]();
        //buildtree(array,tree,0,n-1,1);
        while(c--){
            int type;
            cin>>type;
            if(type==0){
                ll p,q,v;
                cin>>p>>q>>v;
                update(tree,lazy,0,n-1,p-1,q-1,1,v);
            }
            if(type==1){
                ll p,q;
                cin>>p>>q;
                cout<<query(tree,lazy,0,n-1,1,p-1,q-1)<<endl;
            }
        }
        delete[] tree;
        delete[] lazy;
    }
    
    
}
